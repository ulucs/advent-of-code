const input = `#.....##.####.#.#########
.###..#..#..####.##....#.
..#########...###...####.
.##.#.##..#.#..#.#....###
...##....###..#.#..#.###.
###..#...######.####.#.#.
#..###..###..###.###.##..
.#.#.###.#.#...####..#...
##........##.####..##...#
.#.##..#.#....##.##.##..#
###......#..##.####.###.#
....#..###..#######.#...#
#####.....#.##.#..#..####
.#.###.#.###..##.#..####.
..#..##.###...#######....
.#.##.#.#.#.#...###.#.#..
##.###.#.#.###.#......#..
###..##.#...#....#..####.
.#.#.....#..#....##..#..#
#####.#.##..#...##..#....
##..#.#.#.####.#.##...##.
..#..#.#.####...#........
###.###.##.#..#.##.....#.
.##..##.##...#..#..#.#..#
#...####.#.##...#..#.#.##`
  .split('\n')
  .map((a, i) =>
    a.split('').map((v, j) => ({[`${i},${j}`]: v === '.' ? 'c' : 'i'}))
  )
  .reduce((a, b) => [...a, ...b])
  .reduce((a, b) => Object.assign({}, a, b));
const map = new Proxy(input, {
  get(p, t) {
    return p[t] || 'c';
  }
});

let pos = [12, 12];

let dir = 'u';
const dm = {
  u: ([x, y]) => [x - 1, y],
  d: ([x, y]) => [x + 1, y],
  l: ([x, y]) => [x, y - 1],
  r: ([x, y]) => [x, y + 1]
};
const directions = {
  c: {u: 'l', l: 'd', d: 'r', r: 'u'},
  i: {u: 'r', r: 'd', d: 'l', l: 'u'},
  f: {u: 'd', d: 'u', l: 'r', r: 'l'},
  w: {u: 'u', d: 'd', l: 'l', r: 'r'}
};
const act = {c: 'w', w: 'i', i: 'f', f: 'c'};

let ifcct = 0;
for (let i = 0; i < 10000000; i++) {
  const cc = map[pos];
  if (cc === 'w') ifcct++;
  dir = directions[cc][dir];
  map[pos] = act[cc];
  pos = dm[dir](pos);
}

console.log(ifcct);
